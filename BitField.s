* 6809 assembly program generated by cmoc 0.1.85


	SECTION	code


___va_arg	IMPORT
_abs	IMPORT
_adddww	IMPORT
_atoff	IMPORT
_atoi	IMPORT
_atol	IMPORT
_atoui	IMPORT
_atoul	IMPORT
_bsearch	IMPORT
_changePrintfFormat	IMPORT
_cmpdww	IMPORT
_delay	IMPORT
_divdwb	IMPORT
_divdww	IMPORT
_divmod16	IMPORT
_divmod8	IMPORT
_dwtoa	IMPORT
_enableCMOCFloatSupport	IMPORT
_exit	IMPORT
_ftoa	IMPORT
_isalnum	IMPORT
_isalpha	IMPORT
_isdigit	IMPORT
_isspace	IMPORT
_itoa10	IMPORT
_labs	IMPORT
_logOut	IMPORT
_ltoa10	IMPORT
_memchr	IMPORT
_memcmp	IMPORT
_memcpy	IMPORT
_memichr	IMPORT
_memicmp	IMPORT
_memmove	IMPORT
_memset	IMPORT
_memset16	IMPORT
_mulwb	IMPORT
_mulww	IMPORT
_printf	IMPORT
_putchar	IMPORT
_putstr	IMPORT
_qsort	IMPORT
_rand	IMPORT
_readline	IMPORT
_readword	IMPORT
_sbrk	IMPORT
_sbrkmax	IMPORT
_setConsoleOutHook	IMPORT
_set_null_ptr_handler	IMPORT
_set_stack_overflow_handler	IMPORT
_sprintf	IMPORT
_sqrt16	IMPORT
_sqrt32	IMPORT
_srand	IMPORT
_strcat	IMPORT
_strchr	IMPORT
_strcmp	IMPORT
_strcpy	IMPORT
_stricmp	IMPORT
_strlen	IMPORT
_strlwr	IMPORT
_strncmp	IMPORT
_strncpy	IMPORT
_strreplace	IMPORT
_strstr	IMPORT
_strtof	IMPORT
_strtol	IMPORT
_strtoul	IMPORT
_strupr	IMPORT
_subdww	IMPORT
_tolower	IMPORT
_toupper	IMPORT
_ultoa10	IMPORT
_utoa10	IMPORT
_vprintf	IMPORT
_vsprintf	IMPORT
_zerodw	IMPORT
_initBitField	EXPORT


*******************************************************************************

* FUNCTION initBitField(): defined at BitField.c:4
_initBitField	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
* Formal parameter(s):
*      4,U:    2 bytes: bf: struct bitFieldStruct *
*      6,U:    2 bytes: buf: unsigned char *
* Line BitField.c:6: assignment: =
	CLRA
	LDB	#$07		decimal 7 signed
* optim: stripExtraPushPullB
	LDX	4,U		variable bf
* optim: optimizeLeax
* optim: stripExtraPushPullB
	STB	4,X		optim: optimizeLeax
* Line BitField.c:7: assignment: =
* optim: stripExtraClrA_B
	CLRB
* optim: stripUselessPushPull
* optim: removeRepeatedLDX
* optim: optimizeLeax
* optim: stripUselessPushPull
	STD	2,X		optim: optimizeLeax
* Line BitField.c:8: assignment: =
	LDD	6,U		variable `buf', declared at BitField.c:4
* optim: stripUselessPushPull
* optim: optimizeLdx
* optim: stripUselessPushPull
	STD	[4,U]		optim: optimizeLdx
* Useless label L00081 removed
	LEAS	,U
	PULS	U,PC
* END FUNCTION initBitField(): defined at BitField.c:4
funcend_initBitField	EQU *
funcsize_initBitField	EQU	funcend_initBitField-_initBitField
_writebits	EXPORT


*******************************************************************************

* FUNCTION writebits(): defined at BitField.c:11
_writebits	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
	LEAS	-2,S
* Formal parameter(s):
*      4,U:    2 bytes: bf: struct bitFieldStruct *
*      6,U:    2 bytes: value: unsigned int
*      9,U:    1 byte : bitCount: unsigned char
* Local non-static variable(s):
*     -2,U:    1 byte : i: unsigned char
*     -1,U:    1 byte : bitSet: unsigned char
* Line BitField.c:15: init of variable bitSet
	CLR	-1,U		variable bitSet
* Line BitField.c:16: while
	LBRA	L00085		jump to while condition
L00084	EQU	*		while body
* Line BitField.c:17: init of variable currentBit
	LDD	6,U		variable value
	CLRA			optim: andA_B0
	ANDB	#$01
* Cast from `unsigned int' to byte: result already in B
	STB	-2,U		variable currentBit
* Line BitField.c:18: assignment: |=
* optim: storeLoad
	PSHS	B		left side of shift: used and popped by shiftByteLeft
	LDX	4,U		variable bf
	LDB	4,X		member bitLeft of bitFieldStruct
* optim: stripExtraClrA_B
	LBSR	shiftByteLeft
	PSHS	B
	LDX	4,U		variable bf
	LDD	2,X		member currentIndex of bitFieldStruct
	PSHS	B,A		preserve array index
	LDX	4,U		variable bf
	LDD	,X		member buffer of bitFieldStruct
	ADDD	,S++		add stacked array index to array address in D
	TFR	D,X		put resulting address in X
	LDB	,X
	ORB	,S+
	STB	,X
* Line BitField.c:19: post-decrement
	LDX	4,U		variable bf
* optim: optimizeLeax
	DEC	4,X		optim: optimizeLeax
* Line BitField.c:20: if
	LDX	4,U		variable bf
	LDB	4,X		member bitLeft of bitFieldStruct
	CMPB	#0
	BGE	L00088		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00087 removed
* Line BitField.c:20
* Line BitField.c:21: assignment: =
	CLRA
* LDB #$07 optim: optimizeStackOperations1
* PSHS B optim: optimizeStackOperations1
	LDX	4,U		variable bf
* optim: optimizeLeax
	LDB	#7		optim: optimizeStackOperations1
	STB	4,X		optim: optimizeLeax
* Line BitField.c:22: post-increment
* optim: removeRepeatedLDX
	LEAX	2,X		member currentIndex of bitFieldStruct
	LDD	,X
	ADDD	#1
	STD	,X
L00088	EQU	*		else clause of if() started at BitField.c:20
* Useless label L00089 removed
* Line BitField.c:24: post-increment
	INC	-1,U
* Line BitField.c:25: assignment: =
	LDD	6,U		variable `value', declared at BitField.c:11
	LSRA
	RORB
	STD	6,U
L00085	EQU	*		while condition at BitField.c:16
	LDD	6,U		variable `value', declared at BitField.c:11
* optim: loadCmpZeroBeqOrBne
	LBNE	L00084
* optim: branchToNextLocation
* Useless label L00086 removed
* Line BitField.c:27: for init
* Line BitField.c:27: init of variable i
	CLR	-2,U		variable i
	BRA	L00091		jump to for condition
L00090	EQU	*
* Line BitField.c:27: for body
* Line BitField.c:28: assignment: |=
	CLRA
	CLRB
	PSHS	B,A		left side of shift: used and popped by shiftLeft
	LDX	4,U		variable bf
	LDB	4,X		member bitLeft of bitFieldStruct
* optim: stripExtraClrA_B
	LBSR	shiftLeft
* Cast from `int' to byte: result already in B
	PSHS	B
	LDX	4,U		variable bf
	LDD	2,X		member currentIndex of bitFieldStruct
	PSHS	B,A		preserve array index
	LDX	4,U		variable bf
	LDD	,X		member buffer of bitFieldStruct
	ADDD	,S++		add stacked array index to array address in D
	TFR	D,X		put resulting address in X
	LDB	,X
	ORB	,S+
	STB	,X
* Line BitField.c:29: post-decrement
	LDX	4,U		variable bf
* optim: optimizeLeax
	DEC	4,X		optim: optimizeLeax
* Line BitField.c:30: if
	LDX	4,U		variable bf
	LDB	4,X		member bitLeft of bitFieldStruct
	CMPB	#0
	BGE	L00095		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00094 removed
* Line BitField.c:30
* Line BitField.c:31: assignment: =
	CLRA
* LDB #$07 optim: optimizeStackOperations1
* PSHS B optim: optimizeStackOperations1
	LDX	4,U		variable bf
* optim: optimizeLeax
	LDB	#7		optim: optimizeStackOperations1
	STB	4,X		optim: optimizeLeax
* Line BitField.c:32: post-increment
* optim: removeRepeatedLDX
	LEAX	2,X		member currentIndex of bitFieldStruct
	LDD	,X
	ADDD	#1
	STD	,X
L00095	EQU	*		else clause of if() started at BitField.c:30
* Useless label L00096 removed
* Useless label L00092 removed
* Line BitField.c:27: for increment(s)
	INC	-2,U
L00091	EQU	*
* Line BitField.c:27: for condition
	LDB	9,U		variable bitCount
	SUBB	-1,U		variable bitSet
	PSHS	B
	LDB	-2,U		variable `i', declared at BitField.c:27
	CMPB	,S+		compare with LSB
	LBLO	L00090
* optim: branchToNextLocation
* Useless label L00093 removed
* Useless label L00082 removed
	LEAS	,U
	PULS	U,PC
* END FUNCTION writebits(): defined at BitField.c:11
funcend_writebits	EQU *
funcsize_writebits	EQU	funcend_writebits-_writebits
_readbits	EXPORT


*******************************************************************************

* FUNCTION readbits(): defined at BitField.c:37
_readbits	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
	LEAS	-6,S
* Formal parameter(s):
*      4,U:    2 bytes: bf: struct bitFieldStruct *
*      7,U:    1 byte : bitCount: unsigned char
* Local non-static variable(s):
*     -6,U:    1 byte : mask: unsigned char
*     -5,U:    2 bytes: value: unsigned int
*     -3,U:    2 bytes: currentBit: unsigned int
*     -1,U:    1 byte : bitSet: unsigned char
* Line BitField.c:40: init of variable mask
	CLR	-6,U		variable mask
* Line BitField.c:41: init of variable value
	CLRA
	CLRB
	STD	-5,U		variable value
* Line BitField.c:42: init of variable currentBit
* optim: stripExtraClrA_B
* optim: stripExtraClrA_B
	STD	-3,U		variable currentBit
* Line BitField.c:43: init of variable bitSet
	CLR	-1,U		variable bitSet
* Line BitField.c:44: while
	LBRA	L00098		jump to while condition
L00097	EQU	*		while body
* Line BitField.c:45: assignment: =
	CLRA
	LDB	#$01		decimal 1 signed
	PSHS	B,A		left side of shift: used and popped by shiftLeft
	LDX	4,U		variable bf
	LDB	4,X		member bitLeft of bitFieldStruct
* optim: stripExtraClrA_B
	LBSR	shiftLeft
* Cast from `int' to byte: result already in B
	STB	-6,U
* Line BitField.c:46: assignment: =
* optim: storeLoad
	PSHS	B
	LDX	4,U		variable bf
	LDD	2,X		member currentIndex of bitFieldStruct
	PSHS	B,A		preserve array index
	LDX	4,U		variable bf
	LDD	,X		member buffer of bitFieldStruct
	ADDD	,S++		add stacked array index to array address in D
	TFR	D,X		put resulting address in X
	LDB	,X		get r-value
	ANDB	,S+
	PSHS	B		left side of shift: used and popped by shiftByteRightUnsigned
	LDX	4,U		variable bf
	LDB	4,X		member bitLeft of bitFieldStruct
	CLRA
	LBSR	shiftByteRightUnsigned
	CLRA
	STD	-3,U
* Line BitField.c:47: assignment: |=
* optim: storeLoad
	PSHS	B,A		left side of shift: used and popped by shiftLeft
	LDB	-1,U		variable `bitSet', declared at BitField.c:43
* optim: stripExtraClrA_B
	LBSR	shiftLeft
	PSHS	B,A
	LEAX	-5,U
	LDD	,S++
	ORA	,X
	ORB	1,X
	STD	,X
* Line BitField.c:48: post-decrement
	DEC	7,U
* Line BitField.c:49: post-increment
	INC	-1,U
* Line BitField.c:50: post-decrement
	LDX	4,U		variable bf
* optim: optimizeLeax
	DEC	4,X		optim: optimizeLeax
* Line BitField.c:51: if
	LDX	4,U		variable bf
	LDB	4,X		member bitLeft of bitFieldStruct
	CMPB	#0
	BGE	L00101		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00100 removed
* Line BitField.c:51
* Line BitField.c:52: assignment: =
	CLRA
* LDB #$07 optim: optimizeStackOperations1
* PSHS B optim: optimizeStackOperations1
	LDX	4,U		variable bf
* optim: optimizeLeax
	LDB	#7		optim: optimizeStackOperations1
	STB	4,X		optim: optimizeLeax
* Line BitField.c:53: post-increment
* optim: removeRepeatedLDX
	LEAX	2,X		member currentIndex of bitFieldStruct
	LDD	,X
	ADDD	#1
	STD	,X
L00101	EQU	*		else clause of if() started at BitField.c:51
* Useless label L00102 removed
L00098	EQU	*		while condition at BitField.c:44
	LDB	7,U		variable `bitCount', declared at BitField.c:37
* optim: loadCmpZeroBeqOrBne
	LBNE	L00097
* optim: branchToNextLocation
* Useless label L00099 removed
* Line BitField.c:56: return with value
	LDD	-5,U		variable `value', declared at BitField.c:41
* optim: branchToNextLocation
* Useless label L00083 removed
	LEAS	,U
	PULS	U,PC
* END FUNCTION readbits(): defined at BitField.c:37
funcend_readbits	EQU *
funcsize_readbits	EQU	funcend_readbits-_readbits


	ENDSECTION




	SECTION	initgl




*******************************************************************************

* Initialize global variables.


	ENDSECTION




	SECTION	rodata


string_literals_start	EQU	*
string_literals_end	EQU	*


*******************************************************************************

* READ-ONLY GLOBAL VARIABLES


	ENDSECTION




	SECTION	rwdata


* Statically-initialized global variables
* Statically-initialized local static variables


	ENDSECTION




	SECTION	bss


bss_start	EQU	*
* Uninitialized global variables
* Uninitialized local static variables
bss_end	EQU	*


	ENDSECTION




*******************************************************************************

* Importing 3 utility routine(s).
shiftByteLeft	IMPORT
shiftByteRightUnsigned	IMPORT
shiftLeft	IMPORT


*******************************************************************************

	END
