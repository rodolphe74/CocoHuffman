* 6809 assembly program generated by cmoc 0.1.85


	SECTION	code


_NO_NODE	IMPORT
_memory	IMPORT
_lastIndex	IMPORT
_NO_NODE	EXPORT
_memory	EXPORT
_lastIndex	EXPORT
___va_arg	IMPORT
_abs	IMPORT
_adddww	IMPORT
_atoff	IMPORT
_atoi	IMPORT
_atol	IMPORT
_atoui	IMPORT
_atoul	IMPORT
_bsearch	IMPORT
_changePrintfFormat	IMPORT
_cmpdww	IMPORT
_delay	IMPORT
_divdwb	IMPORT
_divdww	IMPORT
_divmod16	IMPORT
_divmod8	IMPORT
_dwtoa	IMPORT
_enableCMOCFloatSupport	IMPORT
_exit	IMPORT
_ftoa	IMPORT
_isalnum	IMPORT
_isalpha	IMPORT
_isdigit	IMPORT
_isspace	IMPORT
_itoa10	IMPORT
_labs	IMPORT
_logOut	IMPORT
_ltoa10	IMPORT
_memchr	IMPORT
_memcmp	IMPORT
_memcpy	IMPORT
_memichr	IMPORT
_memicmp	IMPORT
_memmove	IMPORT
_memset	IMPORT
_memset16	IMPORT
_mulwb	IMPORT
_mulww	IMPORT
_printf	IMPORT
_putchar	IMPORT
_putstr	IMPORT
_qsort	IMPORT
_rand	IMPORT
_readline	IMPORT
_readword	IMPORT
_sbrk	IMPORT
_sbrkmax	IMPORT
_setConsoleOutHook	IMPORT
_set_null_ptr_handler	IMPORT
_set_stack_overflow_handler	IMPORT
_sprintf	IMPORT
_sqrt16	IMPORT
_sqrt32	IMPORT
_srand	IMPORT
_strcat	IMPORT
_strchr	IMPORT
_strcmp	IMPORT
_strcpy	IMPORT
_stricmp	IMPORT
_strlen	IMPORT
_strlwr	IMPORT
_strncmp	IMPORT
_strncpy	IMPORT
_strreplace	IMPORT
_strstr	IMPORT
_strtof	IMPORT
_strtol	IMPORT
_strtoul	IMPORT
_strupr	IMPORT
_subdww	IMPORT
_tolower	IMPORT
_toupper	IMPORT
_ultoa10	IMPORT
_utoa10	IMPORT
_vprintf	IMPORT
_vsprintf	IMPORT
_zerodw	IMPORT
_treeInit	EXPORT


*******************************************************************************

* FUNCTION treeInit(): defined at Tree.c:15
_treeInit	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
	LEAS	-2,S
* Local non-static variable(s):
*     -2,U:    2 bytes: i: int
* Line Tree.c:17: assignment: =
	CLRA
	CLRB
	STD	_lastIndex+0,PCR
* Line Tree.c:20: for init
* Line Tree.c:20: init of variable i
* optim: stripExtraClrA_B
* optim: stripExtraClrA_B
	STD	-2,U		variable i
	BRA	L00097		jump to for condition
L00096	EQU	*
* Line Tree.c:21: for body
* Line Tree.c:21: assignment: =
	LEAX	_NO_NODE+0,PCR	variable `NO_NODE', declared at Tree.c:11
	LDD	#9		size of struct NODE_STRUCT
	PSHS	B,A		push size to _memcpy
	PSHS	X		source struct
	LDX	-2,U		variable i
	LDB	#9		size of array element (optim: arrayIndexMul)
	LBSR	MUL168		get offset in bytes in D
	LEAX	_memory+0,PCR	address of array memory
	LEAX	D,X		add offset
	PSHS	X
	LBSR	_memcpy		copy struct (preserves X)
	LEAS	6,S
* Useless label L00098 removed
* Line Tree.c:20: for increment(s)
	LDD	-2,U
	ADDD	#1
	STD	-2,U
L00097	EQU	*
* Line Tree.c:20: for condition
	LDD	-2,U		variable i
	CMPD	#$0200
	BLT	L00096
* optim: branchToNextLocation
* Useless label L00099 removed
* Line Tree.c:23: assignment: =
	LDD	#$FFFF		constant expression: 65535 decimal, signed
	STD	_lastIndex+0,PCR
* Line Tree.c:24: function call: logOut()
	LDD	#$1200		constant expression: 4608 decimal, unsigned
* Emitted no code to cast `unsigned int' to `int'
	PSHS	B,A		argument 3 of logOut(): int
	LEAX	S00092,PCR	"reserving %d bytes for tree api"
* optim: optimizePshsOps
	CLRA
	LDB	#$01		decimal 1 signed
	PSHS	X,B,A		optim: optimizePshsOps
	LBSR	_logOut
	LEAS	6,S
* Useless label L00085 removed
	LEAS	,U
	PULS	U,PC
* END FUNCTION treeInit(): defined at Tree.c:15
funcend_treeInit	EQU *
funcsize_treeInit	EQU	funcend_treeInit-_treeInit
_createNode	EXPORT


*******************************************************************************

* FUNCTION createNode(): defined at Tree.c:27
_createNode	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
	LEAS	-9,S
* Formal parameter(s):
*      4,U:    2 bytes: pValue: void *
* Local non-static variable(s):
*     -9,U:    9 bytes: node: struct NODE_STRUCT
* Line Tree.c:29: if
	LDD	_lastIndex+0,PCR	variable lastIndex
	CMPD	#$0200
	BLE	L00101		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00100 removed
* Line Tree.c:30
* Line Tree.c:30: return with value
	CLRA
	CLRB
* Emitted no code to cast `int' to `void *'
* Emitted no code to cast `void *' to `struct NODE_STRUCT *'
	BRA	L00086		return (Tree.c:30)
L00101	EQU	*		else clause of if() started at Tree.c:29
* Useless label L00102 removed
* Line Tree.c:32: assignment: =
	LDD	4,U		variable `pValue', declared at Tree.c:27
* optim: stripUselessPushPull
* optim: optimizeLeax
* optim: stripUselessPushPull
	STD	-6,U		optim: optimizeLeax
* Line Tree.c:33: assignment: =
	CLRA
	LDB	#$01		decimal 1 signed
* optim: stripExtraPushPullB
* optim: optimizeLeax
* optim: stripExtraPushPullB
	STB	-9,U		optim: optimizeLeax
* Line Tree.c:34: assignment: =
* optim: stripExtraClrA_B
	CLRB
* Emitted no code to cast `int' to `void *'
* optim: stripUselessPushPull
* optim: optimizeLeax
* optim: stripUselessPushPull
	STD	-4,U		optim: optimizeLeax
* Line Tree.c:35: assignment: =
* optim: removeClr
* optim: removeClr
* Emitted no code to cast `int' to `void *'
* optim: stripUselessPushPull
* optim: optimizeLeax
* optim: stripUselessPushPull
	STD	-2,U		optim: optimizeLeax
* Line Tree.c:36: post-increment
	LDX	_lastIndex+0,PCR	variable `lastIndex', declared at Tree.c:36
	LEAX	1,X
	STX	_lastIndex+0,PCR
* Line Tree.c:37: assignment: =
	LDD	_lastIndex+0,PCR	variable `lastIndex', declared at Tree.c:13
* optim: stripUselessPushPull
* optim: optimizeLeax
* optim: stripUselessPushPull
	STD	-8,U		optim: optimizeLeax
* Line Tree.c:38: function call: memcpy()
	CLRA
	LDB	#$09		constant expression: 9 decimal, unsigned
	PSHS	B,A		argument 3 of memcpy(): unsigned int
	LEAX	-9,U		variable `node', declared at Tree.c:31
	PSHS	X		argument 2 of memcpy(): struct NODE_STRUCT *
	LDX	_lastIndex+0,PCR	variable lastIndex
	LDB	#9		size of array element (optim: arrayIndexMul)
	LBSR	MUL168		get offset in bytes in D
	LEAX	_memory+0,PCR	address of array memory
	LEAX	D,X		add offset
	PSHS	X		argument 1 of memcpy(): struct NODE_STRUCT *
	LBSR	_memcpy
	LEAS	6,S
* Line Tree.c:39: return with value
	LDX	_lastIndex+0,PCR	variable lastIndex
	LDB	#9		size of array element (optim: arrayIndexMul)
	LBSR	MUL168		get offset in bytes in D
	LEAX	_memory+0,PCR	address of array memory
	LEAX	D,X		add offset
	TFR	X,D		address-of operator
* optim: branchToNextLocation
L00086	EQU	*		end of createNode()
	LEAS	,U
	PULS	U,PC
* END FUNCTION createNode(): defined at Tree.c:27
funcend_createNode	EQU *
funcsize_createNode	EQU	funcend_createNode-_createNode
_addChildLeft	EXPORT


*******************************************************************************

* FUNCTION addChildLeft(): defined at Tree.c:42
_addChildLeft	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
* Formal parameter(s):
*      4,U:    2 bytes: parent: struct NODE_STRUCT *
*      6,U:    2 bytes: left: struct NODE_STRUCT *
* Line Tree.c:44: assignment: =
	LDD	6,U		variable `left', declared at Tree.c:42
* optim: stripUselessPushPull
	LDX	4,U		variable parent
* optim: optimizeLeax
* optim: stripUselessPushPull
	STD	5,X		optim: optimizeLeax
* Useless label L00087 removed
	LEAS	,U
	PULS	U,PC
* END FUNCTION addChildLeft(): defined at Tree.c:42
funcend_addChildLeft	EQU *
funcsize_addChildLeft	EQU	funcend_addChildLeft-_addChildLeft
_addChildRight	EXPORT


*******************************************************************************

* FUNCTION addChildRight(): defined at Tree.c:47
_addChildRight	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
* Formal parameter(s):
*      4,U:    2 bytes: parent: struct NODE_STRUCT *
*      6,U:    2 bytes: right: struct NODE_STRUCT *
* Line Tree.c:49: assignment: =
	LDD	6,U		variable `right', declared at Tree.c:47
* optim: stripUselessPushPull
	LDX	4,U		variable parent
* optim: optimizeLeax
* optim: stripUselessPushPull
	STD	7,X		optim: optimizeLeax
* Useless label L00088 removed
	LEAS	,U
	PULS	U,PC
* END FUNCTION addChildRight(): defined at Tree.c:47
funcend_addChildRight	EQU *
funcsize_addChildRight	EQU	funcend_addChildRight-_addChildRight
_getNode	EXPORT


*******************************************************************************

* FUNCTION getNode(): defined at Tree.c:52
_getNode	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
* Formal parameter(s):
*      4,U:    2 bytes: index: int
* Line Tree.c:54: if
	LDD	4,U		variable index
	CMPD	_lastIndex+0,PCR	variable lastIndex
	BGT	L00104		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00105 removed
	LDX	4,U		variable index
	LDB	#9		size of array element (optim: arrayIndexMul)
	LBSR	MUL168		get offset in bytes in D
	LEAX	_memory+0,PCR	address of array memory
* optimizeLoadDX
	LDB	D,X		member used of NODE_STRUCT
* optim: loadCmpZeroBeqOrBne
	BEQ	L00104		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00103 removed
* Line Tree.c:55
* Line Tree.c:55: return with value
	LDX	4,U		variable index
	LDB	#9		size of array element (optim: arrayIndexMul)
	LBSR	MUL168		get offset in bytes in D
	LEAX	_memory+0,PCR	address of array memory
	LEAX	D,X		add offset
	TFR	X,D		address-of operator
	BRA	L00089		return (Tree.c:55)
L00104	EQU	*		else clause of if() started at Tree.c:54
* Useless label L00106 removed
* Line Tree.c:56: return with value
	CLRA
	CLRB
* Emitted no code to cast `int' to `void *'
* Emitted no code to cast `void *' to `struct NODE_STRUCT *'
* optim: branchToNextLocation
L00089	EQU	*		end of getNode()
	LEAS	,U
	PULS	U,PC
* END FUNCTION getNode(): defined at Tree.c:52
funcend_getNode	EQU *
funcsize_getNode	EQU	funcend_getNode-_getNode
_getLastIndex	EXPORT


*******************************************************************************

* FUNCTION getLastIndex(): defined at Tree.c:59
_getLastIndex	EQU	*
* Calling convention: Default
* Line Tree.c:61: return with value
	LDD	_lastIndex+0,PCR	variable `lastIndex', declared at Tree.c:13
* optim: branchToNextLocation
* Useless label L00090 removed
	RTS
* END FUNCTION getLastIndex(): defined at Tree.c:59
funcend_getLastIndex	EQU *
funcsize_getLastIndex	EQU	funcend_getLastIndex-_getLastIndex
_debugTree	EXPORT


*******************************************************************************

* FUNCTION debugTree(): defined at Tree.c:79
_debugTree	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
	LEAS	-80,S
* Formal parameter(s):
*      4,U:    2 bytes: startNode: struct NODE_STRUCT *
*      6,U:    2 bytes: indentString: const char *
*      8,U:    2 bytes: fp: void (*)(struct NODE_STRUCT *)
*     11,U:    1 byte : isLast: char
* Local non-static variable(s):
*    -80,U:   80 bytes: reindentString: char[]
* Line Tree.c:82: function call: logOut()
	LDD	6,U		variable `indentString', declared at Tree.c:79
	PSHS	B,A		argument 3 of logOut(): const char *
	LEAX	S00093,PCR	"%s+-"
* optim: optimizePshsOps
	CLRA
	CLRB
	PSHS	X,B,A		optim: optimizePshsOps
	LBSR	_logOut
	LEAS	6,S
* Line Tree.c:83: function call through pointer
	LDD	4,U		variable `startNode', declared at Tree.c:79
	PSHS	B,A		argument 1: struct NODE_STRUCT *
	JSR	[8,U]		indirect call through variable `fp'
	LEAS	2,S
* Line Tree.c:87: function call: memcpy()
	LDX	#$50		optim: transformPshsDPshsD
* optim: optimizePshsOps
	LDD	6,U		variable `indentString', declared at Tree.c:79
	PSHS	X,B,A		optim: optimizePshsOps
	LEAX	-80,U		address of array reindentString
	PSHS	X		argument 1 of memcpy(): char[]
	LBSR	_memcpy
	LEAS	6,S
* Line Tree.c:88: if
	LDB	11,U		variable `isLast', declared at Tree.c:79
* optim: loadCmpZeroBeqOrBne
	BEQ	L00108		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00107 removed
* Line Tree.c:89
* Line Tree.c:89: function call: strcat()
	LEAY	S00094,PCR	optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-80,U		address of array reindentString
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_strcat
	LEAS	4,S
	BRA	L00109		jump over else clause
L00108	EQU	*		else clause of if() started at Tree.c:88
* Line Tree.c:91
* Line Tree.c:91: function call: strcat()
	LEAY	S00095,PCR	optim: transformPshsXPshsX
* optim: optimizePshsOps
	LEAX	-80,U		address of array reindentString
	PSHS	Y,X		optim: optimizePshsOps
	LBSR	_strcat
	LEAS	4,S
L00109	EQU	*		end of if() started at Tree.c:88
* Line Tree.c:93: if
	LDX	4,U		variable startNode
	LDD	5,X		member left of NODE_STRUCT
* optim: loadCmpZeroBeqOrBne
	BEQ	L00111		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00110 removed
* Line Tree.c:94
* Line Tree.c:94: function call: debugTree()
	CLRA
	CLRB
	PSHS	B,A		argument 4 of debugTree(): int
	LDD	8,U		variable `fp', declared at Tree.c:79
	PSHS	B,A		argument 3 of debugTree(): void (*)(struct NODE_STRUCT *)
	LEAX	-80,U		address of array reindentString
	PSHS	X		argument 2 of debugTree(): char[]
	LDX	4,U		variable startNode
	LDD	5,X		member left of NODE_STRUCT
	PSHS	B,A		argument 1 of debugTree(): struct NODE_STRUCT *
	LBSR	_debugTree
	LEAS	8,S
L00111	EQU	*		else clause of if() started at Tree.c:93
* Useless label L00112 removed
* Line Tree.c:96: if
	LDX	4,U		variable startNode
	LDD	7,X		member right of NODE_STRUCT
* optim: loadCmpZeroBeqOrBne
	BEQ	L00114		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00113 removed
* Line Tree.c:97
* Line Tree.c:97: function call: debugTree()
	LDX	#$01		optim: transformPshsDPshsD
* optim: optimizePshsOps
	LDD	8,U		variable `fp', declared at Tree.c:79
	PSHS	X,B,A		optim: optimizePshsOps
	LEAX	-80,U		address of array reindentString
	PSHS	X		argument 2 of debugTree(): char[]
	LDX	4,U		variable startNode
	LDD	7,X		member right of NODE_STRUCT
	PSHS	B,A		argument 1 of debugTree(): struct NODE_STRUCT *
	LBSR	_debugTree
	LEAS	8,S
L00114	EQU	*		else clause of if() started at Tree.c:96
* Useless label L00115 removed
* Useless label L00091 removed
	LEAS	,U
	PULS	U,PC
* END FUNCTION debugTree(): defined at Tree.c:79
funcend_debugTree	EQU *
funcsize_debugTree	EQU	funcend_debugTree-_debugTree


	ENDSECTION




	SECTION	initgl




*******************************************************************************

* Initialize global variables.


	ENDSECTION




	SECTION	rodata


string_literals_start	EQU	*


*******************************************************************************

* STRING LITERALS
S00092	EQU	*
	FCC	"reserving %d bytes for tree api"
	FCB	0
S00093	EQU	*
	FCC	"%s+-"
	FCB	0
S00094	EQU	*
	FCC	"   "
	FCB	0
S00095	EQU	*
	FCC	"|  "
	FCB	0
string_literals_end	EQU	*


*******************************************************************************

* READ-ONLY GLOBAL VARIABLES


	ENDSECTION




	SECTION	rwdata


* Statically-initialized global variables
_NO_NODE	EQU	*		NO_NODE: struct NODE_STRUCT
* Element 0 of compound initializer: member 'used' of type char
	FCB	$00		decimal 0
* Element 1 of compound initializer: member 'index' of type int
	FDB	$00		decimal 0
* Element 2 of compound initializer: member 'pValue' of type void *
	FDB	$00		decimal 0
* Element 3 of compound initializer: member 'left' of type struct NODE_STRUCT *
	FDB	$00		decimal 0
* Element 4 of compound initializer: member 'right' of type struct NODE_STRUCT *
	FDB	$00		decimal 0
* Statically-initialized local static variables


	ENDSECTION




	SECTION	bss


bss_start	EQU	*
* Uninitialized global variables
_memory	EQU	*
	RMB	4608		memory
_lastIndex	EQU	*
	RMB	2		lastIndex
* Uninitialized local static variables
bss_end	EQU	*


	ENDSECTION




*******************************************************************************

* Importing 5 utility routine(s).
MUL16	IMPORT
MUL168	IMPORT
_logOut	IMPORT
_memcpy	IMPORT
_strcat	IMPORT


*******************************************************************************

	END
